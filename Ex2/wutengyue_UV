package exam_1;

import java.io.IOException;
import java.util.HashSet;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class UV {
	public static class map extends Mapper<LongWritable, Text, Text, Text> {
		public void map(LongWritable key, Text value, Context context ) throws IOException, InterruptedException{
			String line = value.toString();
      //优化点1：使用split切分
			String[] tokens = line.split("\t");
			String ip = tokens[0];
			Integer val = 1;
				context.write(new Text(val.toString()), new Text(ip));
		}
	}

	public static class reduce extends Reducer<Text, Text, Text, Text> {
		public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException{
			HashSet<String> set = new HashSet<String>();
			for(Text item : values){
				set.add(item.toString());
			}
			Integer size = set.size();
			context.write(new Text(size.toString()), new Text());
		}
	}
	
	public static void main(String[] args) throws IOException {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf);
		
		
		job.setJarByClass(UV.class);
		job.setMapperClass(map.class);
		job.setReducerClass(reduce.class);
		
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);
		
		FileInputFormat.addInputPaths(job, args[0]);
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		try {
			System.exit(job.waitForCompletion(true) ? 0 : 1);
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
